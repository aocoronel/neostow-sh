#!/usr/bin/env bash

NEOSTOW_FILE="$PWD/.neostow"
DIR=$(dirname "$NEOSTOW_FILE")

BLUE="$(tput setaf 87)"

help() {
  cat <<EOF
Neostow

Usage: neostow [OPTION] [COMMAND]

Options:
  -d                   Remove all symlinks
  -h, --help           Displays this message and exits
  -p [PARALLEL]        Set parallels
  -r                   Overwrite symlinks
  -t [ABSOLUTE_PATH]   Target a different project directory
  -v                   Enable verbose

Commands:
  edit         Edit the .neostow file
EOF
}

text() {
  color=$1
  text=$2
  reset=$(tput sgr0)
  printf "%s%s%s\n" "${color}" "${text}" "${reset}"
}

verbose() {
  text "$BLUE" "$message: $DEST_FOLDER/$file"
}

createLinks() {
  file=$(basename "$SOURCE_FILE")
  message="Created symlink"

  case "$MODE" in
  overwrite)
    message="Created symlink"
    ln -sf "$SOURCE_FILE" "$DEST_FOLDER"
    ;;
  delete)
    message="Deleted symlink"
    [ "$DEST_FOLDER/$file" = "/" ] && exit 1
    rm "$DEST_FOLDER/$file"
    ;;
  *)
    message="Created symlink"
    ln -s "$SOURCE_FILE" "$DEST_FOLDER"
    ;;
  esac

  val=$?
  [ "$val" -eq 0 ] && {
    [ -n "$VERBOSE" ] && verbose
  }
}

readConfig() {
  working_data=$1

  SOURCE_FILE="$(awk -F '=' '{print $1}' <<<"$working_data")"
  eval SOURCE_FILE="$DIR/$SOURCE_FILE"

  [ ! -f "$SOURCE_FILE" ] && [ ! -d "$SOURCE_FILE" ] && {
    if [ -n "$VERBOSE" ]; then
      echo "Source file or directory $SOURCE_FILE does not exist. Skipping..."
      exit 1
    fi
  }

  DEST_FOLDER=$(awk -F '=' '{print $2}' <<<"$working_data")
  eval DEST_FOLDER="$DEST_FOLDER"

  [[ "$DEST_FOLDER" = */ ]] && mkdir -p "$DEST_FOLDER"

  if ! createLinks; then
    echo "ERROR: Failed to create link for $SOURCE_FILE" >&2
  fi
}

main() {
  parallels=${parallels:-20}

  cat "$NEOSTOW_FILE" | while IFS= read -r line; do
    jobs_running=$(jobs -p | wc -l)

    while [ "$jobs_running" -ge "$parallels" ]; do
      wait -n
      jobs_running=$(jobs -p | wc -l)
    done

    if echo "$line" | grep "#" &>/dev/null; then
      continue
    fi

    readConfig "$line" &
  done

  wait
}

while getopts ":h-drt:vp:" opt; do
  case "$opt" in
  r)
    MODE=overwrite
    ;;
  d)
    MODE=delete
    ;;
  h)
    help
    exit 0
    ;;
  p)
    parallels=$OPTARG
    ;;
  -)
    break
    ;;
  t)
    NEOSTOW_FILE="$OPTARG"
    DIR=$(dirname "$NEOSTOW_FILE")
    ;;
  v)
    VERBOSE=true
    ;;
  ?)
    echo "ERROR: Invalid option '-$OPTARG'" >&2
    exit 1
    ;;
  esac
done

shift $((OPTIND - 1))

case "$1" in
--help)
  help
  exit 0
  ;;
edit)
  if [ -z "$EDITOR" ]; then
    EDITOR=vim
  fi
  $EDITOR "$NEOSTOW_FILE"
  exit 0
  ;;
esac

[ ! -f "$NEOSTOW_FILE" ] && {
  echo "ERROR: $NEOSTOW_FILE not found"
  exit 1
}

main
